openapi: 3.0.0
info:
  title: Filmverleih
  description: "Die Adressbuch-App nutzt einen simplen REST-Webservices zur Kommunikation\
    \ mit dem Backend. Dieser ermöglicht die üblichen CRUD-Operationen zur Suche,\
    \ Anzeige, Bearbeitung und Löschung von Adressen, wobei jede Adresse aus einem\
    \ Vornamen, Nachnamen, Telefonnummer und eine E-Mailadresse besteht."
  contact:
    name: wadDW
    url: dAWDAS
    email: muster.mann@example.de
  license:
    name: CC-BY-4.0
    url: https://creativecommons.org/licenses/by/4.0/deed.de
  version: "1.0"
servers:
- url: http://localhost:3000
tags:
- name: Index
- name: Adresse
- name: Rating
paths:
  /:
    get:
      tags:
      - Index
      summary: Wurzeladresse des Webservices
      description: Liefert eine HATEOAS-Übersicht aller collections
      operationId: index
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/HATEOAS_Collection'
                x-content-type: application/json

  /movie:
    get:
      tags:
      - Adresse
      summary: Film suchen
      description: Suche nach Filme. Gibt eine Liste aller Filme passend zu
        den übergebenen Suchkriterien zurück.
      operationId: search-address
      parameters:
      - name: movieTitle
        in: query
        description: Gesuchter Filmname
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: reggiseur
        in: query
        description: Gesuchter Reggiseur
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: releaseDate
        in: query
        description: Gesuchtes Veröffentlichungsdatum
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: playtime
        in: query
        description: Gesuchte Spielzeit
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Movie'
                x-content-type: application/json
    post:
      tags:
      - Adresse
      summary: Film anlegen
      description: "Neuen Film anlegen. Speichert den übergebenen Film in der\
        \ Datenbank. Der Wert des Feldes \"_id\" wird dabei ignoriert, da in jedem Fall\
        \ einen neuen Film mit neuer ID angelegt wird."
      operationId: create-movie
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Movie'
      responses:
        "201":
          description: Created
          headers:
            Location:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Movie'

  /movie/{id}:
    get:
      tags:
      - Adresse
      summary: Film lesen
      description: Liest einen einzelnen Film vom Server.
      operationId: get-movie
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Movie'
        "404":
          description: Not Found
    put:
      tags:
      - Film überschreiben
      summary: ""
      description: "Überschreibt einen vorhandenen Film auf dem Server. Bis auf die\
        \ ID können alle Felder geändert werden. Der Versuch, die ID zu ändern, wird\
        \ vom Server stillschweigend ignoriert."
      operationId: update-movie
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Movie'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Movie'
        "404":
          description: Not Found
    patch:
      tags:
      - Einzelne Felder ändern
      summary: Einzelne Adressfelder ändern
      description: "Ändert einzelne Felder eines vorhandenen Films. Zulässig sind\
        \ alle Felder bis auf die ID, da diese nachträglich nicht mehr verändert werden\
        \ darf."
      operationId: patch-movie
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Movie'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Movie'
        "404":
          description: Not Found
    delete:
      tags:
      - Adresse
      summary: Film löschen
      description: Löscht einen Film auf dem Server.
      operationId: delete-movie
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
        "404":
          description: Not Found
  
  /rating:
    get:
      tags:
      - Adresse
      summary: Bewertung suchen
      description: Suche nach Bewertung. Gibt eine Liste aller Bewertungen passend zu
        den übergebenen Suchkriterien zurück.
      operationId: search-rating
      parameters:
      - name: movieTitleRate
        in: query
        description: Gesuchte Film
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: rate
        in: query
        description: Gesuchte Bewertung
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Rating'
                x-content-type: application/json
    post:
      tags:
      - Adresse
      summary: Bewertung anlegen
      description: "Neue Bewertung anlegen. Speichert die übergebenen Bewertung in der\
        \ Datenbank. Der Wert des Feldes \"_id\" wird dabei ignoriert, da in jedem Fall\
        \ einen neuen Film mit neuer ID angelegt wird."
      operationId: create-rating
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Rating'
      responses:
        "201":
          description: Created
          headers:
            Location:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Rating'

  /rating/{id}:
    get:
      tags:
      - Adresse
      summary: Bewertung lesen
      description: Liest eine einzelne Bewertung vom Server.
      operationId: get-rating
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Rating'
        "404":
          description: Not Found
    put:
      tags:
      - Bewertung überschreiben
      summary: ""
      description: "Überschreibt eine vorhandene Bewertung auf dem Server. Bis auf die\
        \ ID können alle Felder geändert werden. Der Versuch, die ID zu ändern, wird\
        \ vom Server stillschweigend ignoriert."
      operationId: update-rating
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Rating'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Rating'
        "404":
          description: Not Found
    patch:
      tags:
      - Einzelne Felder ändern
      summary: Einzelne Bewertungsfelder ändern
      description: "Ändert einzelne Felder einer vorhandenen Bewertung. Zulässig sind\
        \ alle Felder bis auf die ID, da diese nachträglich nicht mehr verändert werden\
        \ darf."
      operationId: patch-rating
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Rating'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Rating'
        "404":
          description: Not Found
    delete:
      tags:
      - Adresse
      summary: Bewertung löschen
      description: Löscht eine Bewertung auf dem Server.
      operationId: delete-rating
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
        "404":
          description: Not Found

components:
  schemas:
    HATEOAS_Collection:
      title: HATEOAS-Links einer Collection
      type: object
      properties:
        _name:
          type: string
        query:
          $ref: '#/components/schemas/HATEOAS_Link'
        create:
          $ref: '#/components/schemas/HATEOAS_Link'

    HATEOAS_Resource:
      title: HATEOAS-Links einer Resource
      type: object
      properties:
        read:
          $ref: '#/components/schemas/HATEOAS_Link'
        update:
          $ref: '#/components/schemas/HATEOAS_Link'
        patch:
          $ref: '#/components/schemas/HATEOAS_Link'
        delete:
          $ref: '#/components/schemas/HATEOAS_Link'

    HATEOAS_Link:
      title: HATEOAS-Link
      type: object
      properties:
        url:
          type: string
        method:
          type: string
        query_params:
          type: array
          items:
            type: string

    Movie:
      title: Film
      type: object
      properties:
        _links:
          $ref: '#/components/schemas/HATEOAS_Resource'
        _id:
          type: string
        movieTitle:
          type: string
        reggsieur:
          type: string
        releaseDate:
          type: string
        playtime:
          type: string
          pattern: "(.*@.*\\..*)?"
      required:
        - movieTitle
      example:
        _id: "82438fh3w32234d"
        movieTitle: "Avatar 2"
        reggsieur: "James Camerom"
        releaseDate: "14. Dezember 2022"
        playtime: "3:10"

    Rating:
      title: Bewertung
      type: object
      properties:
        _links:
          $ref: '#/components/schemas/HATEOAS_Resource'
        _id:
          type: string
        movieTitleRate:
          type: string
        rate:
          type: string
          pattern: "(.*@.*\\..*)?"
      required:
        - movieTitleRate
      example:
        _id: "82438fh3w32234d"
        movieTitleRate: "Avatar 2"
        rate: "Der Film war gut"
  securitySchemes: {}

